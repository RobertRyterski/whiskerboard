# -*- coding: utf-8 -*-

from datetime import datetime
from django.template.defaultfilters import slugify
from mongoengine.document import Document
from mongoengine.document import EmbeddedDocument
from mongoengine.queryset import QuerySetManager
from mongoengine.fields import DateTimeField
from mongoengine.fields import EmbeddedDocumentField
from mongoengine.fields import ListField
from mongoengine.fields import StringField

import uuid


class Message(EmbeddedDocument):
    # id is used to keep SQL and API compatability
    id = StringField(default=lambda: uuid.uuid4().hex)
    status = StringField()
    message = StringField()
    timestamp = DateTimeField(default=lambda: datetime.utcnow())
    incident_id = StringField()  # In preparation for SQL compatability
    _default_manager = QuerySetManager()

    def __unicode__(self):
        return str(self.message)


class Incident(Document):
    service_ids = ListField(StringField(), db_field='sid')
    title = StringField(db_field='t')
    messages = ListField(EmbeddedDocumentField(Message), db_field='m')
    start_date = DateTimeField(db_field='s', default=lambda: datetime.utcnow())
    end_date = DateTimeField(db_field='e')
    created_date = DateTimeField(db_field='c',
                                 default=lambda: datetime.utcnow())
    _default_manager = QuerySetManager()

    def __unicode__(self):
        return str(self.title)


class Service(Document):
    name = StringField(db_field='n')
    # Using string field for slug instead of URLField so form validation doesn't
    # fail, since this is an autogenerated field.
    slug = StringField(db_field='s')
    description = StringField(db_field='d')
    category = StringField(db_field='c')
    created_date = DateTimeField(db_field='cd',
                                 default=lambda: datetime.utcnow())
    _default_manager = QuerySetManager()

    class Meta:
        ordering = ('name',)

    def save(self, *args, **kwargs):
        def make_slug(name):
            # For services with the same name, generate a unique slug
            slug = slugify(u'{0}'.format(name)).lower()
            slug_count = 1
            while not self.is_slug_available(slug):
                slug = u'{0}{1}'.format(slug, slug_count)
                slug_count += 1
            return slug

        if not self.id:
            self.slug = make_slug(self.name)

        super(Service, self).save(*args, **kwargs)

    def get_absolute_url(self):
        return self.slug

    @classmethod
    def is_slug_available(cls, slug):
        try:
            cls.objects.get(slug=slug)
            return False
        except cls.DoesNotExist:
            return True

    def __unicode__(self):
        return str(self.name)
